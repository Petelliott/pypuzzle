#!/usr/bin/env python3
from http.server import BaseHTTPRequestHandler, HTTPServer
import time
import os
import json
import sys

parts = os.path.realpath(__file__).split("/")[:-1]
puzzle_path = "/".join(parts) + "/puzzles"

hostName = "localhost"
hostPort = 23964

if len(sys.argv) >= 3:
    if sys.argv[1] == "-p":
        hostPort = int(sys.argv[2])


class MyServer(BaseHTTPRequestHandler):
    def do_GET(self):
        puzzles = __import__("puzzles."+self.path[1:])
        puzzle = getattr(puzzles, self.path[1:])
        data = {"values": puzzle.generate()}
        del puzzle
        del puzzles

        self.protocol_version = 'HTTP/1.1'
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(bytes(json.dumps(data), "utf-8"))

    def do_POST(self):
        data = self.rfile.read(int(self.headers['content-length']))
        data = json.loads(str(data, "utf-8"))
        data["correct"] = []

        puzzles = __import__("puzzles."+self.path[1:])
        puzzle = getattr(puzzles, self.path[1:])

        for value, answer in zip(data["values"], data["answers"]):
            if type(value) is list:
                data["correct"] += [puzzle.solve(*value) == answer]
            else:
                data["correct"] += [puzzle.solve(value) == answer]

        del puzzle
        del puzzles

        self.protocol_version = 'HTTP/1.1'
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(bytes(json.dumps(data), "utf-8"))

myServer = HTTPServer((hostName, hostPort), MyServer)

if not os.path.isdir(puzzle_path):
    os.makedirs(puzzle_path)
    open(puzzle_path+"/__init__.py", 'a')

print(time.asctime(), "Server Starts - %s:%s" % (hostName, hostPort))

try:
    myServer.serve_forever()
except KeyboardInterrupt:
    pass

myServer.server_close()
print(time.asctime(), "Server Stops - %s:%s" % (hostName, hostPort))
